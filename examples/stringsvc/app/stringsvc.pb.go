// code generated by protoc-gen-go. DO NOT EDIT.
// source: examples/stringsvc/stringsvc.proto

package app

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ConcatInput struct {
	Origin               string   `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"`
	Extend               string   `protobuf:"bytes,2,opt,name=extend,proto3" json:"extend,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConcatInput) Reset()         { *m = ConcatInput{} }
func (m *ConcatInput) String() string { return proto.CompactTextString(m) }
func (*ConcatInput) ProtoMessage()    {}
func (*ConcatInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd65f5eb474a82a5, []int{0}
}

func (m *ConcatInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConcatInput.Unmarshal(m, b)
}
func (m *ConcatInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConcatInput.Marshal(b, m, deterministic)
}
func (m *ConcatInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConcatInput.Merge(m, src)
}
func (m *ConcatInput) XXX_Size() int {
	return xxx_messageInfo_ConcatInput.Size(m)
}
func (m *ConcatInput) XXX_DiscardUnknown() {
	xxx_messageInfo_ConcatInput.DiscardUnknown(m)
}

var xxx_messageInfo_ConcatInput proto.InternalMessageInfo

func (m *ConcatInput) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

func (m *ConcatInput) GetExtend() string {
	if m != nil {
		return m.Extend
	}
	return ""
}

type ConcatOutput struct {
	Result               string   `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConcatOutput) Reset()         { *m = ConcatOutput{} }
func (m *ConcatOutput) String() string { return proto.CompactTextString(m) }
func (*ConcatOutput) ProtoMessage()    {}
func (*ConcatOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd65f5eb474a82a5, []int{1}
}

func (m *ConcatOutput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConcatOutput.Unmarshal(m, b)
}
func (m *ConcatOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConcatOutput.Marshal(b, m, deterministic)
}
func (m *ConcatOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConcatOutput.Merge(m, src)
}
func (m *ConcatOutput) XXX_Size() int {
	return xxx_messageInfo_ConcatOutput.Size(m)
}
func (m *ConcatOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_ConcatOutput.DiscardUnknown(m)
}

var xxx_messageInfo_ConcatOutput proto.InternalMessageInfo

func (m *ConcatOutput) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func init() {
	proto.RegisterType((*ConcatInput)(nil), "main.ConcatInput")
	proto.RegisterType((*ConcatOutput)(nil), "main.ConcatOutput")
}

func init() { proto.RegisterFile("examples/stringsvc/stringsvc.proto", fileDescriptor_dd65f5eb474a82a5) }

var fileDescriptor_dd65f5eb474a82a5 = []byte{
	// 159 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4a, 0xad, 0x48, 0xcc,
	0x2d, 0xc8, 0x49, 0x2d, 0xd6, 0x2f, 0x2e, 0x29, 0xca, 0xcc, 0x4b, 0x2f, 0x2e, 0x4b, 0x46, 0xb0,
	0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x58, 0x72, 0x13, 0x33, 0xf3, 0x94, 0x6c, 0xb9, 0xb8,
	0x9d, 0xf3, 0xf3, 0x92, 0x13, 0x4b, 0x3c, 0xf3, 0x0a, 0x4a, 0x4b, 0x84, 0xc4, 0xb8, 0xd8, 0xf2,
	0x8b, 0x32, 0xd3, 0x33, 0xf3, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xa0, 0x3c, 0x90, 0x78,
	0x6a, 0x45, 0x49, 0x6a, 0x5e, 0x8a, 0x04, 0x13, 0x44, 0x1c, 0xc2, 0x53, 0x52, 0xe3, 0xe2, 0x81,
	0x68, 0xf7, 0x2f, 0x2d, 0x81, 0xea, 0x2f, 0x4a, 0x2d, 0x2e, 0xcd, 0x29, 0x81, 0xe9, 0x87, 0xf0,
	0x8c, 0x2c, 0xb9, 0xd8, 0x82, 0xc1, 0xf6, 0x0b, 0xe9, 0x73, 0xb1, 0x41, 0x74, 0x08, 0x09, 0xea,
	0x81, 0x5c, 0xa0, 0x87, 0x64, 0xbd, 0x94, 0x10, 0xb2, 0x10, 0xc4, 0xc8, 0x24, 0x36, 0xb0, 0x73,
	0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xaa, 0x30, 0xa5, 0xb8, 0xd4, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StringClient is the client API for String service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StringClient interface {
	Concat(ctx context.Context, in *ConcatInput, opts ...grpc.CallOption) (*ConcatOutput, error)
}

type stringClient struct {
	cc *grpc.ClientConn
}

func NewStringClient(cc *grpc.ClientConn) StringClient {
	return &stringClient{cc}
}

func (c *stringClient) Concat(ctx context.Context, in *ConcatInput, opts ...grpc.CallOption) (*ConcatOutput, error) {
	out := new(ConcatOutput)
	err := c.cc.Invoke(ctx, "/main.String/Concat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StringServer is the server API for String service.
type StringServer interface {
	Concat(context.Context, *ConcatInput) (*ConcatOutput, error)
}

func RegisterStringServer(s *grpc.Server, srv StringServer) {
	s.RegisterService(&_String_serviceDesc, srv)
}

func _String_Concat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConcatInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StringServer).Concat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.String/Concat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StringServer).Concat(ctx, req.(*ConcatInput))
	}
	return interceptor(ctx, in, info, handler)
}

var _String_serviceDesc = grpc.ServiceDesc{
	ServiceName: "main.String",
	HandlerType: (*StringServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Concat",
			Handler:    _String_Concat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "examples/stringsvc/stringsvc.proto",
}
